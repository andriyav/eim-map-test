{"uid":"2d5bd1ac7fb12839","name":"test_list_agent_preferred_phone","fullName":"tests.test_checklist.TestPromotionChecklist#test_list_agent_preferred_phone","historyId":"9a98c81df3763b85e93b7f267be4a2b2","time":{"start":1740305850440,"stop":1740305852301,"duration":1861},"description":"A decorator for applying a mark on test functions and classes.\n\n``MarkDecorators`` are created with ``pytest.mark``::\n\n    mark1 = pytest.mark.NAME  # Simple MarkDecorator\n    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator\n\nand can then be applied as decorators to test functions::\n\n    @mark2\n    def test_function():\n        pass\n\nWhen a ``MarkDecorator`` is called, it does the following:\n\n1. If called with a single class as its only positional argument and no\n   additional keyword arguments, it attaches the mark to the class so it\n   gets applied automatically to all test cases found in that class.\n\n2. If called with a single function as its only positional argument and\n   no additional keyword arguments, it attaches the mark to the function,\n   containing all the arguments already stored internally in the\n   ``MarkDecorator``.\n\n3. When called in any other case, it returns a new ``MarkDecorator``\n   instance with the original ``MarkDecorator``'s content updated with\n   the arguments passed to this call.\n\nNote: The rules above prevent a ``MarkDecorator`` from storing only a\nsingle function or class reference as its positional argument with no\nadditional keyword or positional arguments. You can work around this by\nusing `with_args()`.\n","descriptionHtml":"<p>A decorator for applying a mark on test functions and classes.</p>\n<p><code>MarkDecorators</code> are created with <code>pytest.mark</code>::</p>\n<pre><code>mark1 = pytest.mark.NAME  # Simple MarkDecorator\nmark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator\n</code></pre>\n<p>and can then be applied as decorators to test functions::</p>\n<pre><code>@mark2\ndef test_function():\n    pass\n</code></pre>\n<p>When a <code>MarkDecorator</code> is called, it does the following:</p>\n<ol>\n<li>\n<p>If called with a single class as its only positional argument and no<br />\nadditional keyword arguments, it attaches the mark to the class so it<br />\ngets applied automatically to all test cases found in that class.</p>\n</li>\n<li>\n<p>If called with a single function as its only positional argument and<br />\nno additional keyword arguments, it attaches the mark to the function,<br />\ncontaining all the arguments already stored internally in the<br />\n<code>MarkDecorator</code>.</p>\n</li>\n<li>\n<p>When called in any other case, it returns a new <code>MarkDecorator</code><br />\ninstance with the original <code>MarkDecorator</code>'s content updated with<br />\nthe arguments passed to this call.</p>\n</li>\n</ol>\n<p>Note: The rules above prevent a <code>MarkDecorator</code> from storing only a<br />\nsingle function or class reference as its positional argument with no<br />\nadditional keyword or positional arguments. You can work around this by<br />\nusing <code>with_args()</code>.</p>\n","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist","time":{"start":1740305718112,"stop":1740305718112,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"A decorator for applying a mark on test functions and classes.\n\n``MarkDecorators`` are created with ``pytest.mark``::\n\n    mark1 = pytest.mark.NAME  # Simple MarkDecorator\n    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator\n\nand can then be applied as decorators to test functions::\n\n    @mark2\n    def test_function():\n        pass\n\nWhen a ``MarkDecorator`` is called, it does the following:\n\n1. If called with a single class as its only positional argument and no\n   additional keyword arguments, it attaches the mark to the class so it\n   gets applied automatically to all test cases found in that class.\n\n2. If called with a single function as its only positional argument and\n   no additional keyword arguments, it attaches the mark to the function,\n   containing all the arguments already stored internally in the\n   ``MarkDecorator``.\n\n3. When called in any other case, it returns a new ``MarkDecorator``\n   instance with the original ``MarkDecorator``'s content updated with\n   the arguments passed to this call.\n\nNote: The rules above prevent a ``MarkDecorator`` from storing only a\nsingle function or class reference as its positional argument with no\nadditional keyword or positional arguments. You can work around this by\nusing `with_args()`.\n","status":"passed","steps":[{"name":"Click authorisation button","time":{"start":1740305851375,"stop":1740305852236,"duration":861},"status":"passed","steps":[{"name":"Get authorisation button","time":{"start":1740305851376,"stop":1740305851385,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist::0","time":{"start":1740305974363,"stop":1740305974363,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_checklist"},{"name":"subSuite","value":"TestPromotionChecklist"},{"name":"host","value":"fv-az1283-647"},{"name":"thread","value":"3350-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_checklist"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":[]},"source":"2d5bd1ac7fb12839.json","parameterValues":[]}